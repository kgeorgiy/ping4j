plugins {
    id 'cpp-library'
    id 'cpp-unit-test'
}

def configure(component, sources) {
    component.targetMachines = [
        machines.windows.x86, machines.windows.x86_64,
        machines.linux.x86, machines.linux.x86_64,
        machines.macOS.x86, machines.macOS.x86_64
    ]

    component.binaries.configureEach {
        def compileTask = compileTask.get()
        def linkTask = linkTask.get()
        def windows = targetMachine.operatingSystemFamily.windows
        def impl = windows ? "windows" : "posix"

        compileTask.source.from fileTree(dir: "src/" + sources + "/c", include: ["*.c", impl + "/*.c"])
        if (toolChain instanceof VisualCpp) {
            compileTask.compilerArgs = ["/TC", "/W4", "/WX", "/wd4214"]
            if (windows) {
                linkTask.linkerArgs = ["iphlpapi.lib", "dnsapi.lib"]
            }
        } else if (toolChain instanceof GccCompatibleToolChain) {
            compileTask.compilerArgs = [
                "-x", "c", "-std=c99",
                "-D_POSIX_C_SOURCE=200112L", "-D_DARWIN_C_SOURCE",
                "-Wall", "-Werror"
            ]
            if (windows) {
                linkTask.linkerArgs = ["-liphlpapi", "-ldnsapi"]
            }
        }
    }
}

configure(library, "main")
configure(unitTest, "test")

library.linkage = [Linkage.SHARED]

model {
    toolChains {
        visualCpp(VisualCpp)
        gcc(Gcc)
        clang(Clang)
    }
}

task copyLibraries(type: Copy, dependsOn: assemble) {
    library.targetMachines.get().each {
        def os = it.operatingSystemFamily
        def prefix = os.windows ? "" : "lib"
        def ext = os.windows ? "dll" : "so"
        def arch = it.architecture
        with copySpec {
            from file("${buildDir}/lib/main/debug/$os/$arch/${prefix}ping4j-platform.$ext")
            rename { _ -> "${prefix}ping4j-$os-$arch.$ext"}
        }
    }
    into file("${projectDir}/_deploy")
}

tasks.build.dependsOn(copyLibraries)
